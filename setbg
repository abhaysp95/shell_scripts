#!/usr/bin/env bash

# write a help menu


# TODO:
# write the set wallpaper path in ~/.config/wallname.txt  {done}
# add --kill flag to kill if the script is daemonized {done, have to suppress error when process is not running generated by if}
# add --restart flag {done, script killed itself and restarted successfully}


# set wallpaper
save_file="/home/$(logname)/.config/wall.png"
pic_dir="/home/$(logname)/Pictures/bgwallpapers"
cur_wallname="/home/$(logname)/.config/wallname.txt"
time_to_sleep="21600"  # 6 hours
wallpaperset=0

# help menu
function get_help() {
	printf "Usage:\tsetbg [--gray] [Options]\n\n"
	printf "\t[no arg]:\t\tNothing will happen(exit with a warning)\n"
	printf "\t[filename]:\t\tIf first arg is image then set it as Wallpaper\n"
	printf "\t[directory]:\t\tIf first arg is directory then choose an image randomly\n"
	printf "\t\t\t\tand set as wallpaper\n"
	printf "\t--gray:\t\t\tIf provided arg with no file or directory name then\n"
	printf "\t\t\t\tchooses a random wallpaper from specified directory in script\n"
	printf "\t--gray [path]:\t\tSame as above options but changes image to grayscale\n"
	printf "\t--gray -c:\t\tSet current set wallpaper in grayscale mode\n"
	printf "\t--autochange, -a:\tPut script with this parameter on startup utility\n"
	printf "\t\t\t\tand it'll change your wallpaper everytime on startup\n"
	printf "\t--daemonize yes:\tMakes the script set random wallpaper\n"
	printf "\t--kill:\t\t\tScript kills itself if running as daemon\n"
	printf "\t--restart:\t\tScript kills and restarts itself again as daemon\n"
	printf "\t--help:\t\t\tShow help\n\n"
	printf "\nChange <pic_dir> variable in script to the desired path of wallpaper's directory\n"
	printf "Change <time_to_sleep> variable provided on top of script according to you\n"
	printf "Wallpaper changed to grayscale are perfectly balanced in RGB color property\n"
	exit 0
}

# script is heavily based on 'if-else' conditions instead of 'case'

# convert to grayscale with balanced rgb
function convert_to_gray() {
	filename="$*"
	write_name "${filename}"
	notify-send -t 1000 "grayscale conversion started"
	convert "$*" \
	\( -clone 0 -channel RG -separate +channel -evaluate-sequence mean \) \
	\( -clone 0 -channel GB -separate +channel -evaluate-sequence mean \) \
	-delete 0 -evaluate-sequence mean "${save_file}"
	notify-send -t 1000 "conversion finished"
}

function write_name() {
	printf "%s" "$1" > ${cur_wallname}
}

[ "$1" = "--help" ] && get_help

# if file given, then look no further
[ -f "$1" ] && \
	cp "$*" "${save_file}" && \
	write_name "$*" && \
	notify-send -t 2500 -i "${save_file}" "Wallpaper changed" && \
	wallpaperset=1

# if given, but not a file
if [ "${wallpaperset}" -ne 1 ]; then
	if [ -n "$1" ]; then
		# if first argument is --gray
		if [ -n "$2" ] && [ "$1" != "--daemonize" ] && [ "$1" != "--gray" ]; then
			# if second argument is a file
			[ -f "$2" ] && convert_to_gray "$2" && \
			notify-send -t 2500 -i "${save_file}" "Wallpaper set after gray conversion"
			# if second argument is a directory
			[ -d "$2" ] && \
				convert_to_gray "$(fd --type f -u -e jpg -e jpeg -e png . "$2" | shuf -n 1)" && \
				notify-send -t 2500 -i "${save_file}" "Random wallpaper set after gray conversion from given directory"
		# if first argument is --gray but there's no second argument, then chose random
		elif [ "$1" = "--gray" ]; then
			if [ -z "$2" ]; then
				convert_to_gray "$(fd --type f -e jpg -e jpeg -e png -u . "${pic_dir}" | shuf -n 1)"
				notify-send -t 2500 -i "${save_file}" "Random wallpaper set after gray conversion"
			elif [ "$2" = "-c" ] || [ "$2" = "--current" ]; then
				if [ -f "${cur_wallname}" ]; then
					convert_to_gray $(cat "${cur_wallname}")
				else
					echo "no file exists named: ${cur_wallname}"
				fi
			fi
		# daemnization part of script
		elif [ "$1" = "--daemonize" ]; then
			if [ -n "$2" ]; then
				flag="$2"
				if [ "${flag}" = "yes" ]; then
					flag="no"
				else
					flag="yes"
				fi
				if [ "${flag}" = "yes" ]; then
					trap '' INT
					cd /home/"$(logname)"/.cache/temp || exit 0
					shift
					while true; do
						filename=$(fd --type f -u -e jpg -e jpeg -e png . "${pic_dir}" | shuf -n 1)
						write_name "${filename}"
						cp "${filename}" "${save_file}"
						notify-send -t 2500 -i "${save_file}" "Random Wallpaper set"
						#setbg -a
						nitrogen --set-zoom-fill "${save_file}"
						sleep "${time_to_sleep}"
					done
					exit 0
				fi
				nohup setsid "$0" --daemonize no 2>/home/"$(logname)"/.cache/temp/chwall.err >/home/"$(logname)"/.cache/temp/chwall.log &
			fi
		# kill the script if it's daemonized
			# kill $(ps axh | grep ".*[s]etbg --daemonize.*" | head -n 1 | cut -d' ' -f1)
			# pass {write here}
		elif [ "$1" = "--kill" ]; then
			pid=$(ps aux | grep ".*[s]etbg --daemonize.*" | head -n 1 | cut -d' ' -f 2)
			if [ "${pid}" -gt 0 ]; then
				kill "${pid}"
				echo "Killed process. Process id: ${pid}"
			fi
			# get pid
			# if condition passes, kill script and run again
		elif [ "$1" = "--restart" ]; then
			pid=$(ps aux | grep ".*[s]etbg --daemonize.*" | head -n 1 | cut -d' ' -f 2)
			if [ "${pid}" -gt 0 ]; then
				setbg --kill  # call this script which has --kill flag given previously
				echo "script daemonized"
				setbg --daemonize yes  # restart and daemoniz script
			fi
		# change wallpaper randomly, one time
		elif [ "$1" = "-a" ] || [ "$1" = "--autochange" ]; then
			filename=$(fd --type f -u -e jpg -e jpeg -e png . "${pic_dir}" | shuf -n 1)
			echo "${filename}"
			write_name "${filename}"
			cp "${filename}" "${save_file}"
			notify-send -t 2500 -i "${save_file}" "Random Wallpaper set"
		# if first argument is not --gray, then it should be a directory
		elif [ "$1" != "--gray" ] && [ -z "$2" ]; then
			[ -d "$1" ] && \
				filename=$(fd --type f -u -e jpg -e jpeg -e png . "$1" | shuf -n 1) && \
				write_name "${filename}" && \
				cp "${filename}" "${save_file}" && \
				notify-send -t 2500 -i "${save_file}" "Random Wallpaper set" || echo "Wrong argument provided. Check help(setbg --help)"
		else
			echo "Wrong argument provided. Check help(setbg --help)"
		fi
	else
		echo "No argument provided. Check help(setbg --help)"
	fi
fi


# getting proper screen size
# convert ~/.config/wall.png -resize 1366x768 ~/.config/wall.png
# convert ~/.config/wall.png -gravity center -background white -extent 177%x100 ~/.config/wall.png

# xwallpaper --zoom ~/.config/wall.png
nitrogen --set-zoom-fill "${save_file}"
