#!/usr/bin/env bash

# write a help menu


# TODO:
# add parameter so that if setbg is set in .xprofile etc. it doesn't change the wallpaper everytime on startup of system


# set wallpaper
save_file="/home/$(logname)/.config/wall.png"
pic_dir="/home/$(logname)/Pictures/bgwallpapers"
time_to_sleep="600"

# help menu
function get_help() {
	printf "Usage:\tsetbg [--gray] [Options]\n\n\n"
	printf "\t[no arg]:\t\tIf no arg then sets random wallpaper from specified directory in script\n\n"
	printf "\t[filename]:\t\tIf first arg is image then set it as Wallpaper\n\n"
	printf "\t[directory]:\t\tIf first arg is directory then choose an image randomly\n"
	printf "\t\t\t\tand set as wallpaper\n\n"
	printf "\t--gray:\t\t\tIf provided arg with no file or directory name then\n"
	printf "\t\t\t\tchooses a random wallpaper from specified directory in script\n\n"
	printf "\t--gray [path]:\t\tSame as above options but changes image to grayscale\n\n"
	printf "\t--autochange, -a:\tput script with this parameter on startup utility\n"
	printf "\t\t\t\tand it'll change your wallpaper everytime on startup\n\n"
	printf "\t--daemonize yes:\tmakes the script set random wallpaper\n\n"
	printf "\t--help:\t\t\tShow help\n\n"
	printf "\nChange <pic_dir> variable in script to the desired path of wallpaper's directory\n"
	printf "Change <time_to_sleep> variable provided on top of script according to you\n\n"
	exit 0
}

# convert to grayscale with balanced rgb
function convert_to_gray() {
	notify-send -t 1000 "grayscale conversion started"
	convert "$*" \
	\( -clone 0 -channel RG -separate +channel -evaluate-sequence mean \) \
	\( -clone 0 -channel GB -separate +channel -evaluate-sequence mean \) \
	-delete 0 -evaluate-sequence mean "${save_file}"
	notify-send -t 1000 "conversion finished"
}

[ "$1" = "--help" ] && get_help

# if file given, then look no further
[ -f "$1" ] && \
	cp "$*" "${save_file}" && \
	notify-send -t 2500 -i "${save_file}" "Wallpaper changed"

# if given, but not a file
if [ -n "$1" ]; then
	# if first argument is --gray
	if [ -n "$2" ] && [ "$1" != "--daemonize" ]; then
		# if second argument is a file
		[ -f "$2" ] && convert_to_gray "$2" && \
		notify-send -t 2500 -i "${save_file}" "Wallpaper set after gray conversion"
		# if second argument is a directory
		[ -d "$2" ] && \
			convert_to_gray "$(fd --type f -u -e jpg -e jpeg -e png . "$2" | shuf -n 1)" && \
			notify-send -t 2500 -i "${save_file}" "Random wallpaper set after gray conversion from given directory"
	# if first argument is --gray but there's no second argument, then chose random
	elif [ "$1" = "--gray" ] && [ -z "$2" ]; then
		convert_to_gray "$(fd --type f -e jpg -e jpeg -e png -u . "${pic_dir}" | shuf -n 1)"
		notify-send -t 2500 -i "${save_file}" "Random wallpaper set after gray conversion"
	elif [ "$1" = "--daemonize" ]; then
		if [ -n "$2" ]; then
			flag="$2"
			if [ "${flag}" = "yes" ]; then
				flag="no"
			else
				flag="yes"
			fi
			if [ "${flag}" = "yes" ]; then
				trap '' INT
				cd /home/"$(logname)"/.cache/temp || exit 0
				shift
				while true; do
					cp "$(fd --type f -u -e jpg -e jpeg -e png . "${pic_dir}" | shuf -n 1)" "${save_file}"
					notify-send -t 2500 -i "${save_file}" "Random Wallpaper set"
					#setbg -a
					nitrogen --set-zoom-fill ~/.config/wall.png
					sleep "${time_to_sleep}"
				done
				exit 0
			fi
			nohup setsid "$0" --daemonize no 2>/home/"$(logname)"/.cache/temp/chwall.err >/home/"$(logname)"/.cache/temp/chwall.log &
		fi
	elif [ "$1" = "-a" ] || [ "$1" = "--autochange" ]; then
		cp "$(fd --type f -u -e jpg -e jpeg -e png . ${pic_dir} | shuf -n 1)" "${save_file}"
		notify-send -t 2500 -i "${save_file}" "Random Wallpaper set"
	# if first argument is not --gray, then it should be a directory
	elif [ "$1" != "--gray" ] && [ -z "$2" ]; then
		[ -d "$1" ] && \
			cp "$(fd --type f -u -e jpg -e jpeg -e png . "$1" | shuf -n 1)" "${save_file}" && \
			notify-send -t 2500 -i "${save_file}" "Random wallpaper choosen from specified directory" || echo "Wrong argument provided. Check help(setbg --help)"
	else
		echo "Wrong argument provided. Check help(setbg --help)"
	fi
else
	echo "No argument provided. Check help(setbg --help)"
fi


# getting proper screen size
# convert ~/.config/wall.png -resize 1366x768 ~/.config/wall.png
# convert ~/.config/wall.png -gravity center -background white -extent 177%x100 ~/.config/wall.png

# xwallpaper --zoom ~/.config/wall.png
nitrogen --set-zoom-fill ~/.config/wall.png
